<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52832_xxaa_s212.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52832_xxaa_s212.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jun 23 11:07:34 2020
<BR><P>
<H3>Maximum Stack Usage =        388 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ant_evt_handler &rArr; antfs_message_process &rArr; authenticate_layer_cmd_decode &rArr; authenticate_response_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[8a]">app_notify_error_state_transit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8c]">sm_state_change</a><BR>
 <LI><a href="#[8c]">sm_state_change</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bc]">cmd_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">SWI2_EGU2_IRQHandler</a> from nrf_sdh.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[16]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">UARTE0_UART0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[44]">ant_evt_handler</a> from dfu_transport_ant.o(i.ant_evt_handler) referenced from dfu_transport_ant.o(sdh_ant_observers0)
 <LI><a href="#[38]">app_error_fault_handler</a> from main.o(i.app_error_fault_handler) referenced from nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[32]">appsh_events_poll</a> from nrf_sdh.o(i.appsh_events_poll) referenced from nrf_sdh.o(i.SWI2_EGU2_IRQHandler)
 <LI><a href="#[41]">data_page_erase_state_run</a> from pstorage.o(i.data_page_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[40]">data_to_swap_write_state_run</a> from pstorage.o(i.data_to_swap_write_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[37]">dfu_cb_handler</a> from dfu_transport_ant.o(i.dfu_cb_handler) referenced from dfu_transport_ant.o(i.dfu_transport_update_start)
 <LI><a href="#[36]">dfu_timeout_handler</a> from dfu_dual_bank.o(i.dfu_timeout_handler) referenced from dfu_dual_bank.o(i.dfu_init)
 <LI><a href="#[43]">head_restore_state_run</a> from pstorage.o(i.head_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[2f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[46]">nrf_sdh_ant_evts_poll</a> from nrf_sdh_ant.o(i.nrf_sdh_ant_evts_poll) referenced from nrf_sdh_ant.o(sdh_stack_observers0)
 <LI><a href="#[47]">nrf_sdh_soc_evts_poll</a> from nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[34]">pstorage_callback_handler</a> from bootloader.o(i.pstorage_callback_handler) referenced from bootloader.o(i.bootloader_init)
 <LI><a href="#[35]">pstorage_callback_handler</a> from dfu_dual_bank.o(i.pstorage_callback_handler) referenced from dfu_dual_bank.o(i.dfu_init)
 <LI><a href="#[45]">pstorage_sys_event_handler</a> from pstorage.o(i.pstorage_sys_event_handler) referenced from pstorage.o(sdh_soc_observers0)
 <LI><a href="#[3c]">state_erase_data_page_entry_run</a> from pstorage.o(i.state_erase_data_page_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[3e]">state_restore_head_entry_run</a> from pstorage.o(i.state_restore_head_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[3d]">state_restore_tail_entry_run</a> from pstorage.o(i.state_restore_tail_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[3a]">state_swap_erase_entry_run</a> from pstorage.o(i.state_swap_erase_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[3b]">state_write_data_swap_entry_run</a> from pstorage.o(i.state_write_data_swap_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[3f]">swap_erase_state_run</a> from pstorage.o(i.swap_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[42]">tail_restore_state_run</a> from pstorage.o(i.tail_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[33]">timeout_handle</a> from antfs.o(i.timeout_handle) referenced from antfs.o(i.antfs_init)
 <LI><a href="#[39]">timeout_handler_scheduled_exec</a> from app_timer.o(i.timeout_handler_scheduled_exec) referenced from app_timer.o(i.timer_timeouts_check)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[48]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[50]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ea]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[eb]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ec]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ed]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b8]"></a>StartApplication</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bootloader_util_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_app_start
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_start
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_data_handle
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_settings_save
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_ota_update_information_file_update
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_write
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_response_transmit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_start_pkt_handle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_update_process
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_ap_update_continue
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_response_transmit
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 362 bytes, Stack size 80 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpio_ports_read
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; app_sched_event_put &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_sdh.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; app_sched_event_put &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 700 bytes, Stack size 20 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[60]"></a>ant_fs_key_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ant_key_manager.o(i.ant_fs_key_set))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_channel_setup
</UL>

<P><STRONG><a name="[5f]"></a>antfs_channel_setup</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, antfs.o(i.antfs_channel_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = antfs_channel_setup &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_layer_transit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_period_set
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_transmit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_fs_key_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[65]"></a>antfs_download_req_resp_prepare</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, antfs.o(i.antfs_download_req_resp_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = antfs_download_req_resp_prepare &rArr; download_request_response_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_write
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_request_response_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_cb_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_download_request_handle
</UL>

<P><STRONG><a name="[5e]"></a>antfs_event_extract</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, antfs.o(i.antfs_event_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = antfs_event_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_evt_handler
</UL>

<P><STRONG><a name="[7d]"></a>antfs_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, antfs.o(i.antfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = antfs_init &rArr; state_machine_reset &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_reset
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[6c]"></a>antfs_input_data_download</STRONG> (Thumb, 500 bytes, Stack size 64 bytes, antfs.o(i.antfs_input_data_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = antfs_input_data_download &rArr; download_request_response_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_crc16_update
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_burst_request_to_complete
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_write
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_request_response_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_process
</UL>

<P><STRONG><a name="[5c]"></a>antfs_message_process</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, antfs.o(i.antfs_message_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = antfs_message_process &rArr; authenticate_layer_cmd_decode &rArr; authenticate_response_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_data_process
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_layer_transit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_layer_cmd_decode
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_layer_transit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_period_set
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_transmit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_response_transmit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_layer_transit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_layer_cmd_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_evt_handler
</UL>

<P><STRONG><a name="[77]"></a>antfs_ota_image_header_crc_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, antfs_ota.o(i.antfs_ota_image_header_crc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = antfs_ota_image_header_crc_get &rArr; crc_crc16_update
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_crc16_update
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_data_handle
</UL>

<P><STRONG><a name="[75]"></a>antfs_ota_image_header_get</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, antfs_ota.o(i.antfs_ota_image_header_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = antfs_ota_image_header_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_data_handle
</UL>

<P><STRONG><a name="[74]"></a>antfs_ota_image_header_parsing</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, antfs_ota.o(i.antfs_ota_image_header_parsing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = antfs_ota_image_header_parsing
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_data_handle
</UL>

<P><STRONG><a name="[7b]"></a>antfs_ota_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, antfs_ota.o(i.antfs_ota_init))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_request_handle
</UL>

<P><STRONG><a name="[6b]"></a>antfs_ota_update_information_file_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, antfs_ota.o(i.antfs_ota_update_information_file_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = antfs_ota_update_information_file_get &rArr; antfs_ota_update_information_file_update &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_ota_update_information_file_update
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_process
</UL>

<P><STRONG><a name="[6f]"></a>antfs_upload_data_resp_transmit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, antfs.o(i.antfs_upload_data_resp_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = antfs_upload_data_resp_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_burst_request_to_complete
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_data_response_fail_reset
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_cb_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_complete_handle
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_process
</UL>

<P><STRONG><a name="[7a]"></a>antfs_upload_req_resp_transmit</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, antfs.o(i.antfs_upload_req_resp_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = antfs_upload_req_resp_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_burst_request_to_complete
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_cb_handler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_request_handle
</UL>

<P><STRONG><a name="[38]"></a>app_error_fault_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.app_error_fault_handler))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[5b]"></a>app_error_handler_bare</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_upload_req_resp_transmit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_upload_data_resp_transmit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_message_process
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_input_data_download
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_download_req_resp_prepare
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_channel_setup
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_activate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_callback_handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transport_close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_update_process
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_app_start
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_events
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_callback_handler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_settings_save
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_ota_update_information_file_update
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_data_process
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_layer_cmd_decode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_layer_transit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_write
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_request_response_transmit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_period_set
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_transmit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_response_transmit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_layer_transit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_boot_update
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_boot_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_scheduled_exec
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ant_evts_poll
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
</UL>

<P><STRONG><a name="[5a]"></a>app_sched_event_put</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, app_scheduler.o(i.app_sched_event_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_sched_event_put &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>app_sched_execute</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_scheduler.o(i.app_sched_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_sched_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_events
</UL>

<P><STRONG><a name="[da]"></a>app_sched_init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, app_scheduler.o(i.app_sched_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_sched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>app_timer_create</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init
</UL>

<P><STRONG><a name="[8f]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>app_timer_start</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_timer_restart
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_start
</UL>

<P><STRONG><a name="[97]"></a>app_timer_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_activate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_timer_restart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_disable
</UL>

<P><STRONG><a name="[8d]"></a>app_util_critical_region_enter</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>

<P><STRONG><a name="[8e]"></a>app_util_critical_region_exit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>

<P><STRONG><a name="[b1]"></a>blocking_flash_page_erase</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bootloader.o(i.blocking_flash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blocking_flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_update_process
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_callback_handler
</UL>

<P><STRONG><a name="[a9]"></a>blocking_flash_word_write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bootloader.o(i.blocking_flash_word_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = blocking_flash_word_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_update_process
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_sd_update_continue
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_bl_update_continue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_boot_update
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_boot_set
</UL>

<P><STRONG><a name="[9d]"></a>bootloader_app_is_valid</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bootloader.o(i.bootloader_app_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bootloader_app_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_settings_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>bootloader_app_start</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bootloader.o(i.bootloader_app_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bootloader_app_start &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_app_start
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>bootloader_dfu_ap_update_continue</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, bootloader.o(i.bootloader_dfu_ap_update_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bootloader_dfu_ap_update_continue &rArr; bootloader_dfu_update_process &rArr; bootloader_settings_save &rArr; pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_ap_image_swap
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_settings_get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_update_process
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_events
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>bootloader_dfu_bl_update_continue</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bootloader.o(i.bootloader_dfu_bl_update_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bootloader_dfu_bl_update_continue &rArr; dfu_bl_image_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bl_image_validate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bl_image_swap
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_settings_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_flash_word_write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugger_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>bootloader_dfu_sd_update_continue</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bootloader.o(i.bootloader_dfu_sd_update_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bootloader_dfu_sd_update_continue &rArr; dfu_sd_image_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_sd_image_validate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_sd_image_swap
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_settings_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_flash_word_write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugger_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>bootloader_dfu_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bootloader.o(i.bootloader_dfu_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bootloader_dfu_start &rArr; dfu_transport_update_start &rArr; services_init &rArr; antfs_channel_setup &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transport_update_start
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transport_close
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_events
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>bootloader_dfu_update_process</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, bootloader.o(i.bootloader_dfu_update_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bootloader_dfu_update_process &rArr; bootloader_settings_save &rArr; pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_settings_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_flash_word_write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_flash_page_erase
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_settings_save
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init_pkt_handle
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_activate
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_timeout_handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_ap_update_continue
</UL>

<P><STRONG><a name="[b3]"></a>bootloader_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bootloader.o(i.bootloader_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bootloader_init &rArr; pstorage_register
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>bootloader_util_app_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bootloader_util_arm.o(i.bootloader_util_app_start))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartApplication
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_app_start
</UL>

<P><STRONG><a name="[9e]"></a>bootloader_util_settings_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bootloader_util_arm.o(i.bootloader_util_settings_get))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_sd_image_validate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_sd_image_swap
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bl_image_validate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_bl_image_swap
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_ap_image_swap
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_update_process
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_sd_update_continue
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_bl_update_continue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_ap_update_continue
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_app_is_valid
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_boot_update
</UL>

<P><STRONG><a name="[78]"></a>crc_crc16_update</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, crc.o(i.crc_crc16_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc_crc16_update
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_input_data_download
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_cb_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_data_handle
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_validate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_ota_image_header_crc_get
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_data_process
</UL>

<P><STRONG><a name="[a2]"></a>dfu_ap_image_swap</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dfu_dual_bank.o(i.dfu_ap_image_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dfu_ap_image_swap &rArr; pstorage_raw_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_raw_store
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_raw_clear
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_settings_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_ap_update_continue
</UL>

<P><STRONG><a name="[a8]"></a>dfu_bl_image_swap</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dfu_dual_bank.o(i.dfu_bl_image_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_bl_image_swap
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_settings_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_bl_update_continue
</UL>

<P><STRONG><a name="[a7]"></a>dfu_bl_image_validate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, dfu_dual_bank.o(i.dfu_bl_image_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_bl_image_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_settings_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_bl_update_continue
</UL>

<P><STRONG><a name="[79]"></a>dfu_data_pkt_handle</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, dfu_dual_bank.o(i.dfu_data_pkt_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dfu_data_pkt_handle &rArr; pstorage_raw_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_raw_store
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_timer_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_data_handle
</UL>

<P><STRONG><a name="[69]"></a>dfu_image_activate</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, dfu_dual_bank.o(i.dfu_image_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dfu_image_activate &rArr; bootloader_dfu_update_process &rArr; bootloader_settings_save &rArr; pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_storage_start_address_get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_update_process
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_process
</UL>

<P><STRONG><a name="[71]"></a>dfu_image_validate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dfu_dual_bank.o(i.dfu_image_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = dfu_image_validate &rArr; dfu_timer_restart &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_storage_start_address_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_timer_restart
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_crc16_update
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_cb_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_complete_handle
</UL>

<P><STRONG><a name="[ae]"></a>dfu_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, dfu_dual_bank.o(i.dfu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dfu_init &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_raw_register
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_start
</UL>

<P><STRONG><a name="[7c]"></a>dfu_init_pkt_handle</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, dfu_dual_bank.o(i.dfu_init_pkt_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dfu_init_pkt_handle &rArr; bootloader_dfu_update_process &rArr; bootloader_settings_save &rArr; pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_raw_clear
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_timer_restart
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_update_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_request_handle
</UL>

<P><STRONG><a name="[cb]"></a>dfu_register_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfu_dual_bank.o(i.dfu_register_callback))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transport_update_start
</UL>

<P><STRONG><a name="[ab]"></a>dfu_sd_image_swap</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dfu_dual_bank.o(i.dfu_sd_image_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_sd_image_swap
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_settings_get
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_sd_update_continue
</UL>

<P><STRONG><a name="[ac]"></a>dfu_sd_image_validate</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dfu_dual_bank.o(i.dfu_sd_image_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_sd_image_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_settings_get
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_sd_update_continue
</UL>

<P><STRONG><a name="[76]"></a>dfu_start_pkt_handle</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, dfu_dual_bank.o(i.dfu_start_pkt_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = dfu_start_pkt_handle &rArr; dfu_timer_restart &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_timer_restart
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_data_handle
</UL>

<P><STRONG><a name="[c8]"></a>dfu_storage_start_address_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dfu_dual_bank.o(i.dfu_storage_start_address_get))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_cb_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_validate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_activate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_callback_handler
</UL>

<P><STRONG><a name="[b0]"></a>dfu_transport_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dfu_transport_ant.o(i.dfu_transport_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_transport_close &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_start
</UL>

<P><STRONG><a name="[af]"></a>dfu_transport_update_start</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dfu_transport_ant.o(i.dfu_transport_update_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = dfu_transport_update_start &rArr; services_init &rArr; antfs_channel_setup &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_start
</UL>

<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; bootloader_dfu_ap_update_continue &rArr; bootloader_dfu_update_process &rArr; bootloader_settings_save &rArr; pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_start
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_sd_update_continue
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_bl_update_continue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_ap_update_continue
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_app_start
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_app_is_valid
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ant_enable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_boot_update
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_boot_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d9]"></a>nrf_sdh_ant_enable</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_sdh_ant.o(i.nrf_sdh_ant_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_sdh_ant_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appsh_events_poll
</UL>

<P><STRONG><a name="[db]"></a>nrf_section_iter_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ant_evts_poll
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[dc]"></a>nrf_section_iter_next</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ant_evts_poll
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[cf]"></a>pstorage_access_status_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_access_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy
</UL>

<P><STRONG><a name="[b6]"></a>pstorage_clear</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_settings_save
</UL>

<P><STRONG><a name="[b4]"></a>pstorage_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, pstorage.o(i.pstorage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pstorage_init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_init
</UL>

<P><STRONG><a name="[c5]"></a>pstorage_raw_clear</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pstorage.o(i.pstorage_raw_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pstorage_raw_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init_pkt_handle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_ap_image_swap
</UL>

<P><STRONG><a name="[ca]"></a>pstorage_raw_register</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_raw_register))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init
</UL>

<P><STRONG><a name="[c6]"></a>pstorage_raw_store</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_raw_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pstorage_raw_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_data_pkt_handle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_ap_image_swap
</UL>

<P><STRONG><a name="[b5]"></a>pstorage_register</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, pstorage.o(i.pstorage_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pstorage_register
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_init
</UL>

<P><STRONG><a name="[b7]"></a>pstorage_store</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_settings_save
</UL>

<P><STRONG><a name="[45]"></a>pstorage_sys_event_handler</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pstorage_sys_event_handler &rArr; flash_operation_success_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(sdh_soc_observers0)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[88]"></a>antfs_ota_update_information_file_update</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, antfs_ota.o(i.antfs_ota_update_information_file_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = antfs_ota_update_information_file_update &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_encode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_ota_update_information_file_get
</UL>

<P><STRONG><a name="[89]"></a>uint32_encode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, antfs_ota.o(i.uint32_encode))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_ota_update_information_file_update
</UL>

<P><STRONG><a name="[b2]"></a>bootloader_settings_save</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bootloader.o(i.bootloader_settings_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bootloader_settings_save &rArr; pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_update_process
</UL>

<P><STRONG><a name="[a6]"></a>debugger_delay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bootloader.o(i.debugger_delay))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_sd_update_continue
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_bl_update_continue
</UL>

<P><STRONG><a name="[c4]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, bootloader.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugger_delay
</UL>

<P><STRONG><a name="[34]"></a>pstorage_callback_handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bootloader.o(i.pstorage_callback_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pstorage_callback_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_flash_page_erase
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bootloader.o(i.bootloader_init)
</UL>
<P><STRONG><a name="[a4]"></a>wait_for_events</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bootloader.o(i.wait_for_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wait_for_events &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_start
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_ap_update_continue
</UL>

<P><STRONG><a name="[36]"></a>dfu_timeout_handler</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, dfu_dual_bank.o(i.dfu_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dfu_timeout_handler &rArr; bootloader_dfu_update_process &rArr; bootloader_settings_save &rArr; pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_dfu_update_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_dual_bank.o(i.dfu_init)
</UL>
<P><STRONG><a name="[c9]"></a>dfu_timer_restart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dfu_dual_bank.o(i.dfu_timer_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dfu_timer_restart &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_start_pkt_handle
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init_pkt_handle
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_validate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_data_pkt_handle
</UL>

<P><STRONG><a name="[35]"></a>pstorage_callback_handler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dfu_dual_bank.o(i.pstorage_callback_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pstorage_callback_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_storage_start_address_get
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_dual_bank.o(i.dfu_init)
</UL>
<P><STRONG><a name="[44]"></a>ant_evt_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dfu_transport_ant.o(i.ant_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = ant_evt_handler &rArr; antfs_message_process &rArr; authenticate_layer_cmd_decode &rArr; authenticate_response_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_message_process
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_extract
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_transport_ant.o(sdh_ant_observers0)
</UL>
<P><STRONG><a name="[67]"></a>antfs_event_download_request_handle</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dfu_transport_ant.o(i.antfs_event_download_request_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = antfs_event_download_request_handle &rArr; antfs_download_req_resp_prepare &rArr; download_request_response_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_download_req_resp_prepare
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_process
</UL>

<P><STRONG><a name="[5d]"></a>antfs_event_process</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, dfu_transport_ant.o(i.antfs_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = antfs_event_process &rArr; antfs_event_upload_request_handle &rArr; dfu_init_pkt_handle &rArr; bootloader_dfu_update_process &rArr; bootloader_settings_save &rArr; pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_upload_data_resp_transmit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_input_data_download
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_error_notify
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_request_handle
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_data_handle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_complete_handle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_download_request_handle
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_activate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_ota_update_information_file_get
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_evt_handler
</UL>

<P><STRONG><a name="[70]"></a>antfs_event_upload_complete_handle</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dfu_transport_ant.o(i.antfs_event_upload_complete_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = antfs_event_upload_complete_handle &rArr; upload_data_response_fail_reset &rArr; antfs_upload_data_resp_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_upload_data_resp_transmit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_data_response_fail_reset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_process
</UL>

<P><STRONG><a name="[6e]"></a>antfs_event_upload_data_handle</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, dfu_transport_ant.o(i.antfs_event_upload_data_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = antfs_event_upload_data_handle &rArr; dfu_data_pkt_handle &rArr; pstorage_raw_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_data_response_fail_reset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_error_notify
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_start_pkt_handle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_data_pkt_handle
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_crc16_update
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_ota_image_header_parsing
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_ota_image_header_get
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_ota_image_header_crc_get
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_process
</UL>

<P><STRONG><a name="[6d]"></a>antfs_event_upload_request_handle</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, dfu_transport_ant.o(i.antfs_event_upload_request_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = antfs_event_upload_request_handle &rArr; dfu_init_pkt_handle &rArr; bootloader_dfu_update_process &rArr; bootloader_settings_save &rArr; pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_upload_req_resp_transmit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init_pkt_handle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_ota_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_process
</UL>

<P><STRONG><a name="[37]"></a>dfu_cb_handler</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, dfu_transport_ant.o(i.dfu_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = dfu_cb_handler &rArr; antfs_download_req_resp_prepare &rArr; download_request_response_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_upload_req_resp_transmit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_upload_data_resp_transmit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_download_req_resp_prepare
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_data_response_fail_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_storage_start_address_get
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_validate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_crc16_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_transport_ant.o(i.dfu_transport_update_start)
</UL>
<P><STRONG><a name="[6a]"></a>dfu_error_notify</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dfu_transport_ant.o(i.dfu_error_notify))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_data_handle
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_process
</UL>

<P><STRONG><a name="[68]"></a>flash_busy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfu_transport_ant.o(i.flash_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_busy &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_access_status_get
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_request_handle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_complete_handle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_download_request_handle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transport_update_start
</UL>

<P><STRONG><a name="[c7]"></a>services_init</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, dfu_transport_ant.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = services_init &rArr; antfs_channel_setup &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_channel_setup
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_cb_handler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_transport_update_start
</UL>

<P><STRONG><a name="[72]"></a>upload_data_response_fail_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dfu_transport_ant.o(i.upload_data_response_fail_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = upload_data_response_fail_reset &rArr; antfs_upload_data_resp_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_upload_data_resp_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_cb_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_data_handle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_event_upload_complete_handle
</UL>

<P><STRONG><a name="[57]"></a>NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[cc]"></a>enter_boot_set</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.enter_boot_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enter_boot_set &rArr; blocking_flash_word_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_flash_word_write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_boot_update
</UL>

<P><STRONG><a name="[cd]"></a>enter_boot_update</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main.o(i.enter_boot_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enter_boot_update &rArr; enter_boot_set &rArr; blocking_flash_word_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_settings_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_flash_word_write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_boot_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>app_notify</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pstorage.o(i.app_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>

<P><STRONG><a name="[8a]"></a>app_notify_error_state_transit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pstorage.o(i.app_notify_error_state_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>

<P><STRONG><a name="[b9]"></a>clear_operation_execute</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, pstorage.o(i.clear_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[ba]"></a>clear_post_processing_run</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pstorage.o(i.clear_post_processing_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = clear_post_processing_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[bc]"></a>cmd_process</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pstorage.o(i.cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>

<P><STRONG><a name="[be]"></a>cmd_queue_element_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pstorage.o(i.cmd_queue_element_init))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>

<P><STRONG><a name="[bd]"></a>cmd_queue_enqueue</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, pstorage.o(i.cmd_queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_raw_store
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_raw_clear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[bb]"></a>command_end_procedure_run</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pstorage.o(i.command_end_procedure_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = command_end_procedure_run &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>

<P><STRONG><a name="[41]"></a>data_page_erase_state_run</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, pstorage.o(i.data_page_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = data_page_erase_state_run &rArr; clear_post_processing_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>data_to_swap_write_state_run</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pstorage.o(i.data_to_swap_write_state_run))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>flash_api_err_code_process</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pstorage.o(i.flash_api_err_code_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>

<P><STRONG><a name="[d0]"></a>flash_operation_success_run</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, pstorage.o(i.flash_operation_success_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_operation_success_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
</UL>

<P><STRONG><a name="[d3]"></a>flash_page_erase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pstorage.o(i.flash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_erase_data_page_entry_run
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>

<P><STRONG><a name="[d4]"></a>flash_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pstorage.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
</UL>

<P><STRONG><a name="[43]"></a>head_restore_state_run</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, pstorage.o(i.head_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = head_restore_state_run &rArr; clear_post_processing_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>is_page_erase_required</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, pstorage.o(i.is_page_erase_required))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[e2]"></a>is_word_aligned</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pstorage.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_raw_store
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_raw_clear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[d2]"></a>main_state_err_busy_process</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pstorage.o(i.main_state_err_busy_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = main_state_err_busy_process &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[8c]"></a>sm_state_change</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pstorage.o(i.sm_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>

<P><STRONG><a name="[e5]"></a>state_data_erase_swap_entry_run</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, pstorage.o(i.state_data_erase_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = state_data_erase_swap_entry_run
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>

<P><STRONG><a name="[3c]"></a>state_erase_data_page_entry_run</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pstorage.o(i.state_erase_data_page_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = state_erase_data_page_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>state_restore_head_entry_run</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pstorage.o(i.state_restore_head_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = state_restore_head_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>state_restore_tail_entry_run</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, pstorage.o(i.state_restore_tail_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = state_restore_tail_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>state_swap_erase_entry_run</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pstorage.o(i.state_swap_erase_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = state_swap_erase_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>state_write_data_swap_entry_run</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pstorage.o(i.state_write_data_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = state_write_data_swap_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>store_cmd_flash_write_execute</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, pstorage.o(i.store_cmd_flash_write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[3f]"></a>swap_erase_state_run</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pstorage.o(i.swap_erase_state_run))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>swap_sub_state_err_busy_process</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pstorage.o(i.swap_sub_state_err_busy_process))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[c2]"></a>swap_sub_state_state_change</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pstorage.o(i.swap_sub_state_state_change))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[42]"></a>tail_restore_state_run</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pstorage.o(i.tail_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tail_restore_state_run &rArr; clear_post_processing_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>authenticate_layer_cmd_decode</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, antfs.o(i.authenticate_layer_cmd_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = authenticate_layer_cmd_decode &rArr; authenticate_response_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_start
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_layer_transit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_response_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_message_process
</UL>

<P><STRONG><a name="[86]"></a>authenticate_layer_transit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, antfs.o(i.authenticate_layer_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = authenticate_layer_transit &rArr; timeout_start &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_start
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_message_process
</UL>

<P><STRONG><a name="[85]"></a>authenticate_response_transmit</STRONG> (Thumb, 202 bytes, Stack size 288 bytes, antfs.o(i.authenticate_response_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = authenticate_response_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_burst_request_to_complete
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_transmit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_message_process
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handle
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_layer_cmd_decode
</UL>

<P><STRONG><a name="[64]"></a>beacon_transmit</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, antfs.o(i.beacon_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_burst_request_to_complete
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_upload_req_resp_transmit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_upload_data_resp_transmit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_message_process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_channel_setup
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_layer_transit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_request_response_transmit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_response_transmit
</UL>

<P><STRONG><a name="[62]"></a>channel_period_set</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, antfs.o(i.channel_period_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = channel_period_set &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_message_process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_channel_setup
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_layer_cmd_decode
</UL>

<P><STRONG><a name="[66]"></a>download_request_response_transmit</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, antfs.o(i.download_request_response_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = download_request_response_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_burst_request_to_complete
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_input_data_download
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_download_req_resp_prepare
</UL>

<P><STRONG><a name="[63]"></a>event_queue_write</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, antfs.o(i.event_queue_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = event_queue_write &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_upload_req_resp_transmit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_message_process
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_input_data_download
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_download_req_resp_prepare
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_channel_setup
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_data_process
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_layer_transit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_layer_cmd_decode
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_layer_transit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_request_response_transmit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_layer_transit
</UL>

<P><STRONG><a name="[61]"></a>link_layer_transit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, antfs.o(i.link_layer_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = link_layer_transit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_disable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_message_process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_channel_setup
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_layer_cmd_decode
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handle
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_layer_cmd_decode
</UL>

<P><STRONG><a name="[80]"></a>state_machine_reset</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, antfs.o(i.state_machine_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = state_machine_reset &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_init
</UL>

<P><STRONG><a name="[9c]"></a>timeout_disable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, antfs.o(i.timeout_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_reset
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_layer_transit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_transmit
</UL>

<P><STRONG><a name="[33]"></a>timeout_handle</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, antfs.o(i.timeout_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = timeout_handle &rArr; authenticate_response_transmit &rArr; beacon_transmit &rArr; timeout_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_layer_transit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_write
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_response_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> antfs.o(i.antfs_init)
</UL>
<P><STRONG><a name="[9a]"></a>timeout_start</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, antfs.o(i.timeout_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = timeout_start &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_data_process
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_layer_transit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_layer_cmd_decode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_layer_transit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_layer_cmd_decode
</UL>

<P><STRONG><a name="[82]"></a>transport_layer_cmd_decode</STRONG> (Thumb, 616 bytes, Stack size 40 bytes, antfs.o(i.transport_layer_cmd_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = transport_layer_cmd_decode &rArr; timeout_start &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_start
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_layer_transit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_period_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_message_process
</UL>

<P><STRONG><a name="[87]"></a>transport_layer_transit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, antfs.o(i.transport_layer_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = transport_layer_transit &rArr; timeout_start &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_start
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_message_process
</UL>

<P><STRONG><a name="[84]"></a>upload_data_process</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, antfs.o(i.upload_data_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = upload_data_process &rArr; timeout_start &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_crc16_update
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_start
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_message_process
</UL>

<P><STRONG><a name="[81]"></a>wait_burst_request_to_complete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, antfs.o(i.wait_burst_request_to_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wait_burst_request_to_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_upload_req_resp_transmit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_upload_data_resp_transmit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antfs_input_data_download
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_request_response_transmit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_transmit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_response_transmit
</UL>

<P><STRONG><a name="[55]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[51]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[93]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[96]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[92]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[bf]"></a>compare_reg_update</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[e6]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[d5]"></a>list_insertions_handler</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[c0]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, app_timer.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[90]"></a>rtc1_stop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[39]"></a>timeout_handler_scheduled_exec</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_timer.o(i.timeout_handler_scheduled_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timeout_handler_scheduled_exec &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer.o(i.timer_timeouts_check)
</UL>
<P><STRONG><a name="[59]"></a>timer_list_handler</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>timer_list_insert</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[d6]"></a>timer_list_remove</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[98]"></a>timer_stop_op_schedule</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[58]"></a>timer_timeouts_check</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = timer_timeouts_check &rArr; app_sched_event_put &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>user_op_alloc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[e1]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
</UL>

<P><STRONG><a name="[e3]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_SetPriority
</UL>

<P><STRONG><a name="[e4]"></a>__sd_nvic_is_app_accessible_priority</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_is_app_accessible_priority))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_SetPriority
</UL>

<P><STRONG><a name="[32]"></a>appsh_events_poll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_sdh.o(i.appsh_events_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appsh_events_poll &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.SWI2_EGU2_IRQHandler)
</UL>
<P><STRONG><a name="[df]"></a>sd_nvic_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nrf_sdh.o(i.sd_nvic_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_is_app_accessible_priority
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[dd]"></a>sdh_request_observer_notify</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_sdh.o(i.sdh_request_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[de]"></a>sdh_state_observer_notify</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, nrf_sdh.o(i.sdh_state_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[e0]"></a>softdevices_evt_irq_enable</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nrf_sdh.o(i.softdevices_evt_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = softdevices_evt_irq_enable &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_is_app_accessible_priority
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[46]"></a>nrf_sdh_ant_evts_poll</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, nrf_sdh_ant.o(i.nrf_sdh_ant_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_sdh_ant_evts_poll &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ant.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[47]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
